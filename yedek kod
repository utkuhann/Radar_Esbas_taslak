import cv2
import numpy as np
import torch
import os
from datetime import datetime
from collections import defaultdict

# Real-ESRGAN için Gerekli Kütüphaneler
from basicsr.archs.rrdbnet_arch import RRDBNet
from realesrgan import RealESRGANer

# Diğer Gerekli Kütüphaneler
from ultralytics import YOLO
import supervision as sv
import pandas as pd
from openpyxl import load_workbook
from openpyxl.drawing.image import Image as OpenpyxlImage
from google.cloud import vision
from google.api_core import exceptions

# --- 1. YAPILANDIRMA VE SABİTLER ---
VIDEO_YOLU = "/Users/utkuhanergene/Documents/SoftwareProjects/MyVSCode/supervision/examples/speed_estimation/plaka_tanima_projesi/videos/traffic2.mp4"
ARAC_MODEL_YOLU = "yolov8n.pt"
PLAKA_MODEL_YOLU = "lapi.pt"
REAL_ESRGAN_MODEL_YOLU = 'Real-ESRGAN/RealESRGAN_x4plus.pth'

# Performans Ayarları
TARGET_HEIGHT = 480
VIDEO_FPS = 30

# İşlevsel Ayarlar
TESPIT_CIZGISI_ORANI = 0.6 
HIZ_LIMITI_KMH = 60
PIKSEL_PER_METRE = 34
CIKTI_KLASORU = "hiz_ihlalleri_yuksek_kalite"
EXCEL_RAPOR_ADI = "ihlal_raporu_kaliteli.xlsx"
DEVICE = "cuda" if torch.cuda.is_available() else "cpu"
print(f"Kullanılan Cihaz: {DEVICE}")


# --- 2. YARDIMCI FONKSİYONLAR ---
def metni_oku(image_np: np.ndarray) -> str | None:
    try:
        if image_np is None: return None
        client = vision.ImageAnnotatorClient()
        success, encoded_image = cv2.imencode('.png', image_np)
        if not success: return None
        content = encoded_image.tobytes()
        image = vision.Image(content=content)
        response = client.text_detection(image=image)
        if response.error.message: return None
        if response.text_annotations:
            return "".join(response.text_annotations[0].description.split())
    except Exception as e:
        print(f"OCR Hatası: {e}")
    return None

def iyilestir_ve_plaka_oku(arac_resmi: np.ndarray, plaka_model: YOLO, upsampler: RealESRGANer) -> tuple[str | None, np.ndarray | None]:
    plaka_tespitleri = plaka_model(arac_resmi, verbose=False)[0]
    if len(plaka_tespitleri.boxes) == 0:
        return None, None

    plaka_xyxy = plaka_tespitleri.boxes[0].xyxy[0].cpu().numpy()
    plaka_kirpma = sv.crop_image(image=arac_resmi, xyxy=plaka_xyxy)
    if plaka_kirpma.size == 0: return None, None

    h, w, _ = plaka_kirpma.shape
    buyutulmus_plaka = cv2.resize(plaka_kirpma, (w*3, h*3), interpolation=cv2.INTER_CUBIC)
    gray_plate = cv2.cvtColor(buyutulmus_plaka, cv2.COLOR_BGR2GRAY)
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    contrast_plate = clahe.apply(gray_plate)
    
    plaka_metni = metni_oku(contrast_plate)
    final_enhanced_plate = buyutulmus_plaka

    if not plaka_metni or len(plaka_metni) < 5:
        print("İlk OCR denemesi başarısız, Real-ESRGAN ile tekrar deneniyor...")
        if upsampler:
            try:
                super_res_plaka, _ = upsampler.enhance(plaka_kirpma, outscale=4)
                gray_sr = cv2.cvtColor(super_res_plaka, cv2.COLOR_BGR2GRAY)
                clahe_sr = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
                contrast_sr = clahe_sr.apply(gray_sr)
                plaka_metni_sr = metni_oku(contrast_sr)
                if plaka_metni_sr and len(plaka_metni_sr) > len(plaka_metni or ""):
                    plaka_metni = plaka_metni_sr
                final_enhanced_plate = super_res_plaka
            except Exception as e:
                print(f"Real-ESRGAN hatası: {e}")
    return plaka_metni, final_enhanced_plate

def excel_raporu_olustur(veri_listesi: list, dosya_yolu: str):
    if not veri_listesi:
        print("Raporlanacak ihlal bulunamadı.")
        return
    
    df = pd.DataFrame(veri_listesi)
    df.to_excel(dosya_yolu, index=False, engine='openpyxl')
    print(f"Veriler '{dosya_yolu}' dosyasına kaydedildi. Resimler ekleniyor...")
    
    try:
        wb = load_workbook(dosya_yolu)
        ws = wb.active
        ws.column_dimensions['A'].width = 20
        ws.column_dimensions['D'].width = 20
        ws.column_dimensions['E'].width = 50
        ws.column_dimensions['F'].width = 50
        ws.column_dimensions['G'].width = 30 # Araç resmi için
        ws.column_dimensions['H'].width = 25 # Plaka resmi için
        
        ws['G1'] = "Arac Goruntusu"
        ws['H1'] = "Plaka Goruntusu"

        for i, kayit in enumerate(veri_listesi, start=2):
            ws.row_dimensions[i].height = 120
            arac_resim_yolu = kayit.get("arac_resim_yolu")
            plaka_resim_yolu = kayit.get("plaka_resim_yolu")
            
            if arac_resim_yolu and os.path.exists(arac_resim_yolu):
                img = OpenpyxlImage(arac_resim_yolu)
                img.height, img.width = 150, 200
                ws.add_image(img, f'G{i}')

            if plaka_resim_yolu and os.path.exists(plaka_resim_yolu):
                img = OpenpyxlImage(plaka_resim_yolu)
                img.height, img.width = 100, 150
                ws.add_image(img, f'H{i}')
        wb.save(dosya_yolu)
        print(f"Resimler başarıyla Excel'e eklendi.")
    except Exception as e:
        print(f"Excel'e resim eklenirken bir hata oluştu: {e}")


# --- 3. ANA İŞLEM FONKSİYONU ---
def main():
    os.makedirs(CIKTI_KLASORU, exist_ok=True)
    
    print("Modeller yükleniyor...")
    arac_model = YOLO(ARAC_MODEL_YOLU).to(DEVICE)
    plaka_model = YOLO(PLAKA_MODEL_YOLU).to(DEVICE)
    upsampler = None
    try:
        # ... (Real-ESRGAN yükleme kodu)
        esrgan_model = RRDBNet(num_in_ch=3, num_out_ch=3, num_feat=64, num_block=23, num_grow_ch=32, scale=4)
        upsampler = RealESRGANer(scale=4, model_path=REAL_ESRGAN_MODEL_YOLU, model=esrgan_model, tile=0, half=True if DEVICE=='cuda' else False, gpu_id=0 if DEVICE=='cuda' else None)
        print("Real-ESRGAN modeli başarıyla yüklendi.")
    except Exception as e:
        print(f"UYARI: Real-ESRGAN modeli yüklenemedi: {e}")

    tracker = sv.ByteTrack(frame_rate=VIDEO_FPS, track_activation_threshold=0.25)
    box_annotator = sv.BoxAnnotator(thickness=2)
    
    track_gecmisi = defaultdict(list)
    best_shot_info = {}
    final_violators = []
    processed_violators = set()

    cap_for_scan = cv2.VideoCapture(VIDEO_YOLU)
    frame_count = int(cap_for_scan.get(cv2.CAP_PROP_FRAME_COUNT))
    print(f"Video taranıyor ({frame_count} kare)...")
    
    frame_idx = 0
    while True:
        ret, frame = cap_for_scan.read()
        if not ret: break

        original_height, original_width, _ = frame.shape
        low_res_frame = cv2.resize(frame, (int(original_width * TARGET_HEIGHT / original_height), TARGET_HEIGHT))
        H, W, _ = low_res_frame.shape
        
        results = arac_model(low_res_frame, verbose=False, conf=0.4)[0]
        detections = sv.Detections.from_ultralytics(results)
        detections = tracker.update_with_detections(detections)
        
        VEHICLE_CLASSES = [2, 3, 5, 7]
        detections = detections[np.isin(detections.class_id, VEHICLE_CLASSES)]
        
        for i in range(len(detections)):
            xyxy = detections.xyxy[i]
            tracker_id = detections.tracker_id[i]
            
            xyxy_orig = xyxy * np.array([original_width / W, original_height / H, original_width / W, original_height / H])
            arac_alani = (xyxy_orig[2] - xyxy_orig[0]) * (xyxy_orig[3] - xyxy_orig[1])
            
            if tracker_id not in best_shot_info or arac_alani > best_shot_info[tracker_id]['alan']:
                best_shot_info[tracker_id] = {'frame': frame.copy(), 'xyxy': xyxy_orig, 'alan': arac_alani}

            center_y = int(xyxy_orig[3])
            track_gecmisi[tracker_id].append(center_y)

            if len(track_gecmisi[tracker_id]) > 1 and tracker_id not in processed_violators:
                onceki_y = track_gecmisi[tracker_id][-2]
                tespit_cizgisi_y_orig = int(original_height * TESPIT_CIZGISI_ORANI)
                
                if (onceki_y < tespit_cizgisi_y_orig <= center_y) or (onceki_y > tespit_cizgisi_y_orig >= center_y):
                    hiz_kmh = (abs(center_y - onceki_y) / PIKSEL_PER_METRE / (1 / VIDEO_FPS)) * 3.6
                    if hiz_kmh > HIZ_LIMITI_KMH:
                        print(f"--- ID {tracker_id} İHLAL TESPİT EDİLDİ ({int(hiz_kmh)} km/h) ---")
                        final_violators.append({'tracker_id': tracker_id, 'hiz': int(hiz_kmh), 'timestamp': datetime.now()})
                        processed_violators.add(tracker_id)
        
        annotated_frame = box_annotator.annotate(scene=low_res_frame.copy(), detections=detections)
        tespit_cizgisi_y_low_res = int(H * TESPIT_CIZGISI_ORANI)
        cv2.line(annotated_frame, (0, tespit_cizgisi_y_low_res), (W, tespit_cizgisi_y_low_res), (0, 255, 0), 2)
        
        cv2.imshow("Hiz Denetimi - Hızlı Tarama", annotated_frame)
        if cv2.waitKey(1) & 0xFF == ord('q'): break
        frame_idx += 1
        
    cap_for_scan.release()
    cv2.destroyAllWindows()
    print(f"Hızlı tarama tamamlandı. {len(final_violators)} adet potansiyel ihlal bulundu.")

    # --- AŞAMA 2: YÜKSEK KALİTELİ İHLAL İŞLEME ---
    print("Yüksek kaliteli ihlal görüntüleri işleniyor...")
    ihlal_kayitlari = []
    
    for violator in final_violators:
        tracker_id = violator['tracker_id']
        best_info = best_shot_info.get(tracker_id)
        if not best_info: continue

        print(f"\n--- ID {tracker_id} için işlem başlıyor ---")
        arac_resmi = sv.crop_image(image=best_info['frame'], xyxy=best_info['xyxy'])
        
        plaka_metni, iyilestirilmis_plaka_resmi = iyilestir_ve_plaka_oku(arac_resmi, plaka_model, upsampler)
        print(f"-> ID {tracker_id} için okunan plaka: {plaka_metni or 'OKUNAMADI'}")
        
        # EKSİK OLAN BLOK: Resimleri diske kaydet ve rapor listesini doldur
        timestamp_str = violator['timestamp'].strftime("%Y%m%d_%H%M%S")
        arac_resim_yolu = os.path.join(CIKTI_KLASORU, f"arac_{tracker_id}_{timestamp_str}.jpg")
        plaka_resim_yolu = os.path.join(CIKTI_KLASORU, f"plaka_{tracker_id}_{timestamp_str}.jpg")
        
        # Araç resmi her zaman kaydedilir
        cv2.imwrite(arac_resim_yolu, arac_resmi, [cv2.IMWRITE_JPEG_QUALITY, 90])
        
        # Plaka resmi sadece bulunduysa kaydedilir
        if iyilestirilmis_plaka_resmi is not None:
            cv2.imwrite(plaka_resim_yolu, iyilestirilmis_plaka_resmi, [cv2.IMWRITE_JPEG_QUALITY, 95])
        else:
            plaka_resim_yolu = None # Yolu boş bırak
        
        ihlal_kayitlari.append({
            "timestamp": violator['timestamp'].strftime("%Y-%m-%d %H:%M:%S"),
            "tracker_id": tracker_id,
            "hiz_kmh": violator['hiz'],
            "plaka_metni": plaka_metni or "OKUNAMADI",
            "arac_resim_yolu": arac_resim_yolu,
            "plaka_resim_yolu": plaka_resim_yolu,
        })
        
    excel_raporu_olustur(ihlal_kayitlari, EXCEL_RAPOR_ADI)
    print("Tüm işlemler tamamlandı.")

if __name__ == "__main__":
    main()